using Plots, GLPKMathProgInterface, JuMP

r_LR = 0.1
N = 4
r_CR = [0.4, -0.1, 0.2, -0.05]
p = [0.1, 0.2, 0.3, 0.4]
Q = 10000
K = 2
IR = [0.15, 0.27]
# L[1] = 3500
L_k = [3500, Inf]
P = 1000
# L_A = ones(K)

maxlucro = Model(solver = GLPKSolverLP())
@variable(maxlucro, 0 <= Q_LR <= Q)
@variable(maxlucro, 0 <= Q_CR <= Q)
@variable(maxlucro, L_A[k=1:K,c=1:N] <= L_k[k])

# @variable(maxlucro, Esp_CR)
@variable(maxlucro, L_D[c=1:N])

@constraint(maxlucro, Q_LR + Q_CR == Q)
# @constraint(maxlucro, Esp_CR == sum(r_CR[c]*p[c] for c=1:N))
@constraint(maxlucro, [c=1:N], sum(L_A[k,c] for k=1:K) == Q_CR*(r_CR[c]) + Q_LR*(r_LR))
@constraint(maxlucro, [c=1:N], L_D[c] == sum(L_A[k,c]*(1-IR[k]) for k=1:K))
@constraint(maxlucro, 0 .<= L_A[k=2:K,c=1:N])

@objective(maxlucro, Max, sum(L_D[c]*p[c] for c=1:N))
status = solve(maxlucro)

# Q_CR = 9000
# Q_LR = 10000-Q_CR
#
# teste_LA = ones(K,N)
# teste_LD = ones(N)
# teste_LA = Q_CR*(r_CR[c]) + Q_LR*(r_LR)
# teste_LD = teste_LA[c=1:N]*(1-IR[1])
# teste_obj = sum(teste_LD[c]*p[c] for c=1:N)
